#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[935] =
    {   0,
        0,    0,    2,    2,  135,  134,    4,  134,  127,  134,
      127,  127,  130,  127,  127,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    4,    0,    0,  133,    1,  129,  128,  130,
      125,  124,  126,  132,  132,  132,  132,  132,  107,  132,
      132,  108,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  109,  132,  110,  111,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  112,  113,
      114,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  115,  132,  132,
      132,  132,  132,  132,  132,  132,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,  131,  128,   94,  132,   95,  132,  132,   96,   97,
      121,  132,  132,  132,  132,  132,  132,  132,  132,  132,
       98,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,   99,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  100,
      132,  132,  101,  132,  132,  132,  132,  132,  123,  132,

      122,  132,  102,  132,  132,  103,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  104,  132,  132,
      132,  120,  132,  105,  132,  132,  132,  106,  132,  132,
      132,  132,  117,  132,  132,  132,  132,  132,  132,  132,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  132,
      132,  132,  132,  132,   72,  132,  132,  132,  132,  132,
      132,  132,   73,  132,  132,  132,  132,   74,  132,  132,
      132,   75,  132,  132,  132,  132,  132,   76,   77,   78,
      132,  132,   79,  132,   80,  132,  132,  132,  132,  132,
      132,   81,  132,   82,   83,   84,  132,   85,  132,  132,
      132,  132,   86,  132,  132,  132,  132,  132,   87,   88,

      132,  132,  132,  132,  132,  132,  132,   89,  132,  132,
      132,  132,   90,   91,  132,  132,  132,  132,  132,  132,
      132,  132,   92,  132,  132,   93,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   54,   55,  132,  132,  132,  132,  119,
      132,  132,  132,   56,  132,  132,  132,  132,   57,  132,
      132,  132,  132,  132,  132,  132,  132,  132,   58,  132,
      132,  132,   59,   60,  132,  132,  132,  132,   61,   62,
       63,   64,  132,  132,  132,   65,   66,  132,  132,  132,
      132,  132,   67,  132,  132,  132,  132,   68,  132,  132,
      132,   69,  132,  132,  132,   70,  132,  132,  132,   71,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,  132,   30,  132,
      132,   31,  132,   32,  132,  132,  132,   33,   34,  132,
       35,   36,   37,  132,   38,  132,   39,   40,  132,   41,
       42,  132,  132,   43,  132,  132,   44,  132,  132,  132,
       45,  132,   46,   47,   48,  132,   49,  132,  132,  132,
       50,   51,   52,   53,  132,  132,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   14,   15,   16,   17,   18,
      132,  132,   19,  132,   20,   21,   22,   23,  132,   24,
      132,  132,   25,   26,  132,   27,   28,  132,  132,  132,
      118,   29,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  116,

      132,   10,  132,   11,  132,   12,  132,  132,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  132,
        7,  132,    8,    9,    2,    2,    2,    2,    2,    5,
        6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[942] =
    {   0,
        0,    0,   65,    0,  416, 3728,  129,    0, 3728,  409,
      407,  403,  125,  124,  400,  121,  121,  173,  219,  110,
      121,  119,  140,  165,  113,  127,  180,  181,  220,  225,
      226,    0,  178,  271,  319,  161,  224,  221,    0,  154,
      157,  394,    0,  368,  359,  348,  154,  194,  344,  376,
      437,  489,  541,  258,  589,  273,  321,  637,  335,  275,
      376,  388,  689,  737,  789,  283,  327,  839,  891,  939,
      440,  439,  206,  350,  347, 3728, 3728,  336,  300,  203,
     3728, 3728, 3728,    0,  134,  203,  220,  271,  223,  277,
      311,    0,  277,  324,  380,  438,  356,  363,  454,  432,

      363,  381,  431,  493,  440,  436,  441,  445,  443,  444,
      484,  491,    0,  472,  508,  485,  502,  488,  510,  507,
      550,  520,  530,  538,  537,  538,  548,  560,  556,    0,
      559,  544,  547,  567,  565,  562,  565,  574,  593,  581,
      582,  601,  593,  609,  600,  604,  605,  603,  599,  640,
      622,  649,  618,  643,  654,  640,    0,  303,  303,  287,
        0,    0,  252,  248,  342,    0,    0,    0,  666,  668,
      677,  707,  743,  698,  701,  759,  720,  791,  731,  788,
      783,  814,  833,  991,  843,  851,  852,  905, 1041,  893,
      896,  897,  935,  937,  941,  956,  981,  735,  993, 1090,

     1006, 1023,  772, 1009, 1049, 1075,  827, 1047, 1092, 1091,
     1093, 1107, 1125, 1123,  865, 1147, 1129, 1142, 1157, 1159,
     1178, 1181, 1193, 1202, 1211, 1226, 1168, 1227, 1237, 1243,
     1252, 1268, 1269, 1265, 1293, 1302, 1305, 1310, 1291, 1294,
     1319, 3728,  239,    0,  660,    0,  663,  668,    0,    0,
        0,  707,  711,  787,  815,  819,  865,  887,  910,  905,
        0,  989,  938,  971, 1203, 1009, 1021, 1009, 1038, 1047,
     1063, 1103, 1111, 1144, 1190, 1232,    0, 1243, 1248, 1259,
     1290, 1323, 1331, 1327, 1328, 1335, 1347, 1348, 1351, 1354,
     1339, 1347,    0, 1343, 1359, 1356, 1364, 1369,    0, 1365,

     1352, 1355,    0, 1366, 1363, 1363, 1379, 1380, 1393, 1375,
     1377, 1385, 1400, 1382, 1396, 1401, 1402,    0, 1387, 1394,
     1395,    0, 1405,    0, 1402, 1399, 1417,    0, 1409, 1409,
     1412, 1429,    0, 1418, 1414, 1433, 1415, 1419, 1425, 1439,
        0,  206, 1443, 1447, 1451, 1453, 1455, 1456, 1459, 1464,
     1477, 1481, 1485, 1468, 1509, 1517, 1520, 1522, 1538, 1496,
     1550, 1541, 1563, 1551, 1574, 1576, 1580, 1584, 1605, 1606,
     1592, 1615, 1614, 1617, 1618, 1630, 1646, 1649, 1670, 1658,
     1668, 1680, 1672, 1689, 1702, 1659, 1703, 1708, 1724, 1721,
     1733, 1718, 1732, 1743, 1758, 1757, 1776, 1746, 1786, 1775,

     1781, 1767, 1800, 1812, 1816, 1811, 1817, 1845, 1826, 1829,
     1861, 1855, 1870, 1871, 1866, 1879, 1880, 1903, 1889, 1895,
     1905, 1933, 1914, 1924, 1939, 1929, 1938, 1955, 1977, 1963,
     1972, 1974, 1998, 1993, 2008, 2011, 2012, 2017, 2023, 1514,
     1517, 1535, 1596, 1620,    0, 1652, 1707, 1774, 1779, 1806,
     1836, 1887,    0, 1912, 1904, 1928, 1961,    0, 1971, 1974,
     1981,    0, 2011, 2030, 2026, 2031, 2051,    0,    0,    0,
     2052, 2040,    0, 2043,    0, 2050, 2048, 2043, 2050, 2052,
     2064,    0, 2060,    0,    0,    0, 2056,    0, 2065, 2076,
     2066, 2068,    0, 2084, 2083, 2071, 2072, 2078,    0,    0,

     2095, 2099, 2088, 2084, 2085, 2093, 2104,    0, 2105, 2102,
     2114, 2105,    0, 2102, 2119, 2110, 2104, 2125, 2110, 2124,
     2130, 2128,    0, 2118, 2135,    0, 2136, 2151, 2139, 2154,
     2145, 2150, 2173, 2179, 2160, 2189, 2188, 2190, 2214, 2205,
     2233, 2223, 2227, 2228, 2244, 2258, 2245, 2277, 2259, 2262,
     2287, 2296, 2288, 2299, 2290, 2293, 2301, 2331, 2318, 2332,
     2333, 2341, 2347, 2350, 2362, 2372, 2373, 2401, 2344, 2395,
     2396, 2398, 2404, 2417, 2406, 2427, 2435, 2436, 2452, 2440,
     2468, 2449, 2458, 2481, 2489, 2480, 2484, 2490, 2506, 2512,
     2522, 2503, 2538, 2543, 2534, 2540, 2544, 2552, 2556, 2557,

     2574, 2580, 2586, 2582, 2596, 2597, 2608, 2611, 2642, 2614,
     2620, 2626, 2630,    0,    0, 2134, 2219, 2349, 2384,    0,
     2402, 2436, 2632,    0, 2652, 2639, 2644, 2652,    0, 2639,
     2647, 2660, 2664, 2650, 2651, 2654, 2666, 2664,    0, 2672,
     2667, 2667,    0,    0, 2669, 2685, 2672, 2681,    0,    0,
        0,    0, 2694, 2691, 2681,    0,    0, 2699, 2687, 2689,
     2703, 2700,    0, 2709, 2691, 2709, 2714, 2700, 2703, 2703,
     2723,    0, 2720, 2723, 2724,    0, 2711, 2732, 2738,    0,
     2736, 2738, 2739, 2742, 2744, 2754, 2748, 2770, 2757, 2772,
     2773, 2782, 2788, 2796, 2807, 2811, 2813, 2812, 2822, 2824,

     2826, 2837, 2836, 2861, 2867, 2862, 2870, 2878, 2880, 2866,
     2876, 2904, 2906, 2915, 2921, 2910, 2912, 2916, 2920, 2938,
     2949, 2960, 2944, 2950, 2954, 2973, 2990, 2972, 2978, 2984,
     3012, 3006, 3016, 3018, 3040, 3044, 3046, 3055, 3029, 3050,
     3069, 3052, 3074, 3086, 3108, 3109, 3083, 2818,    0, 2866,
     2995, 3044, 3073,    0, 3076, 3094, 3083,    0,    0, 3113,
        0,    0,    0, 3112,    0, 3105,    0,    0, 3095,    0,
        0, 3105, 3120,    0, 3115, 3127,    0, 3109, 3126, 3114,
        0, 3139, 3126,    0,    0, 3136,    0, 3148, 3150, 3133,
        0,    0,    0,    0, 3139, 3147, 3157, 3158, 3160, 3162,

     3172, 3183, 3168, 3194, 3200, 3191, 3202, 3212, 3226, 3216,
     3228, 3234, 3237, 3240, 3256, 3242, 3250, 3252, 3258, 3266,
     3282, 3271, 3274, 3300, 3308, 3290, 3296, 3306, 3312, 3324,
     3342, 3336, 3325, 3341, 3358, 3346, 3364, 3374, 3375, 3376,
     3379, 3380, 3398, 3415, 3409,    0,    0,    0,    0,    0,
     3166, 3178,    0, 3273,    0,    0,    0,    0, 3332,    0,
     3341, 3386,    0,    0, 3389,    0,    0, 3397, 3404, 3414,
        0,    0, 3420, 3424, 3430, 3432, 3433, 3434, 3468, 3438,
     3463, 3446, 3449, 3472, 3474, 3484, 3486, 3487, 3497, 3498,
     3502, 3508, 3512, 3516, 3538, 3540, 3526, 3537, 3541,    0,

     3433,    0, 3488,    0, 3507,    0, 3522, 3541,    0, 3554,
     3556, 3562, 3577, 3566, 3594, 3590, 3591, 3595, 3596, 3572,
        0, 3586,    0,    0, 3605, 3608, 3626, 3629, 3630,    0,
        0, 3631, 3639, 3728, 3703, 3707,  180, 3711, 3715, 3719,
     3723
    } ;

static yyconst flex_int16_t yy_def[942] =
    {   0,
      934,    1,  934,    3,  934,  934,  934,  935,  934,  936,
      934,  934,  934,  934,  934,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  938,  938,
      934,  939,  938,  940,  938,  938,  938,  938,  938,  941,
      941,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,  934,  935,  936,  934,  934,  934,  934,  934,
      934,  934,  934,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  938,  938,  939,  940,
      938,  938,  938,  938,  938,  938,  938,  938,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  934,  934,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      938,  938,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  937,
      937,  937,  937,  937,   51,   51,   51,   51,   51,  937,
      937,   51,   51,    0,  934,  934,  934,  934,  934,  934,
      934
    } ;

static yyconst flex_int16_t yy_nxt[3794] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,   14,
        9,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   32,   32,   32,    6,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   32,   32,   32,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   43,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,

       66,   66,   66,   39,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   66,   66,   66,
       73,   73,   79,   80,   81,   82,   85,   91,   86,  117,
      103,  105,  109,  118,   87,  104,   88,  106,  110,  244,
      107,   89,  111,  108,   90,  158,   73,   92,   73,   73,
      112,  164,  165,   85,   91,   86,  117,  103,  105,  109,
      118,   87,  104,   88,  106,  110,  244,  107,   89,  111,
      108,   90,  113,   84,   92,   93,  150,  112,  151,  114,
      115,  152,   94,  122,  136,  116,  119,  123,  137,   95,

      120,  124,   96,   97,  166,  167,  121,   73,   73,  113,
       79,   80,   93,  150,  342,  151,  114,  115,  152,   94,
      122,  136,  116,  119,  123,  137,   95,  120,  124,   96,
       97,   98,  125,  121,  245,   99,  153,  250,  133,  100,
      155,  156,  129,  246,  154,  101,  126,  243,  102,  134,
      130,  247,  127,  128,  131,  135,  342,  132,   98,  125,
      163,  245,   99,  153,  250,  133,  100,  155,  156,  129,
      246,  154,  101,  126,  169,  102,  134,  130,  247,  127,
      128,  131,  135,  248,  132,  138,  249,  139,  188,  169,
      140,  203,  161,  189,  169,  251,  194,  141,  142,  169,

      254,  169,  195,  143,  158,   73,  341,  255,  243,  169,
      248,  169,  138,  249,  139,  188,  169,  140,  203,  169,
      189,  169,  251,  194,  141,  142,  169,  254,  252,  195,
      143,  144,  145,  196,  255,  146,  169,  169,  169,  147,
      256,  197,  253,  221,   78,  148,  169,  222,  149,  164,
      165,  169,   76,  242,  168,  252,  163,  169,  144,  145,
      196,  202,  146,  169,  169,  162,  147,  256,  197,  253,
      221,  169,  148,  161,  222,  149,  157,  157,  169,  157,
      157,  157,  157,  157,  169,  157,  157,  157,  202,  261,
      169,  170,  204,  171,  262,  269,  205,  157,  169,  172,

      207,  173,  206,  257,  208,  258,  174,  270,  209,  175,
       83,   78,  169,   77,   76,  934,  261,  934,  170,  204,
      171,  262,  269,  205,  169,  934,  172,  207,  173,  206,
      257,  208,  258,  174,  270,  209,  175,  157,  157,  169,
      157,  157,  157,  157,  157,  271,  157,  157,  157,  934,
      934,  169,  238,  176,  259,  169,  169,  934,  240,  241,
      239,  267,  268,  276,  260,  277,  263,  278,  279,  280,
      281,  264,  271,  177,  934,  169,  169,  265,  934,  238,
      176,  259,  169,  169,  266,  240,  241,  239,  267,  268,
      276,  260,  277,  263,  278,  279,  280,  281,  264,  286,

      177,  178,  169,  169,  265,  169,  934,  272,  179,  273,
      291,  266,  934,  274,  282,  180,  284,  283,  181,  182,
      275,  285,  292,  287,  293,  169,  286,  294,  178,  295,
      934,  296,  169,  288,  272,  179,  273,  291,  289,  290,
      274,  282,  180,  284,  283,  181,  182,  275,  285,  292,
      287,  293,  169,  183,  294,  299,  295,  184,  296,  300,
      288,  185,  297,  301,  298,  289,  290,  186,  302,  303,
      187,  304,  305,  306,  307,  308,  309,  169,  934,  310,
      183,  311,  299,  315,  184,  312,  300,  313,  185,  297,
      301,  298,  314,  316,  186,  302,  303,  187,  304,  305,

      306,  307,  308,  309,  169,  169,  310,  319,  311,  190,
      315,  320,  312,  321,  313,  191,  317,  322,  192,  314,
      316,  193,  323,  324,  318,  169,  934,  934,  325,  327,
      328,  329,  169,  934,  319,  934,  190,  332,  320,  326,
      321,  335,  191,  317,  322,  192,  934,  336,  193,  323,
      324,  318,  169,  169,  198,  325,  327,  328,  329,  337,
      330,  199,  200,  331,  332,  333,  326,  201,  335,  334,
      339,  340,  338,  169,  336,  934,  440,  934,  934,  441,
      169,  198,  169,  343,  169,  934,  337,  330,  199,  200,
      331,  442,  333,  169,  201,  934,  334,  339,  340,  338,

      169,  210,  169,  440,  169,  169,  441,  934,  344,  169,
      343,  169,  349,  169,  169,  211,  934,  169,  442,  350,
      169,  212,  213,  169,  934,  169,  934,  934,  210,  169,
      345,  169,  169,  443,  169,  344,  169,  169,  346,  349,
      169,  169,  211,  169,  169,  444,  350,  355,  212,  213,
      169,  169,  169,  169,  214,  347,  169,  345,  348,  169,
      443,  169,  215,  169,  169,  346,  216,  169,  934,  217,
      169,  169,  444,  169,  355,  169,  351,  934,  169,  169,
      169,  214,  347,  169,  934,  348,  169,  934,  169,  215,
      352,  934,  934,  216,  169,  169,  217,  934,  169,  358,

      169,  218,  169,  351,  169,  169,  169,  169,  392,  359,
      445,  356,  219,  357,  353,  169,  934,  352,  220,  169,
      934,  354,  169,  934,  169,  169,  358,  169,  218,  446,
      169,  169,  169,  447,  169,  392,  359,  445,  356,  219,
      357,  353,  934,  169,  934,  220,  169,  360,  354,  169,
      169,  169,  169,  223,  169,  224,  446,  169,  225,  169,
      447,  934,  398,  169,  361,  226,  227,  169,  169,  169,
      169,  228,  366,  367,  360,  169,  169,  169,  369,  169,
      223,  169,  224,  368,  934,  225,  169,  169,  169,  398,
      169,  361,  226,  227,  169,  169,  169,  448,  228,  366,

      367,  169,  169,  229,  230,  369,  169,  231,  169,  169,
      368,  232,  169,  169,  169,  169,  375,  233,  449,  370,
      234,  169,  450,  377,  448,  376,  934,  169,  169,  169,
      229,  230,  169,  169,  231,  451,  169,  934,  232,  169,
      169,  169,  934,  375,  233,  449,  370,  234,  169,  450,
      377,  169,  376,  169,  169,  169,  169,  169,  378,  169,
      169,  454,  451,  379,  235,  934,  236,  380,  169,  237,
      934,  169,  169,  169,  934,  169,  934,  169,  169,  934,
      169,  934,  169,  455,  169,  378,  381,  934,  454,  382,
      379,  235,  169,  236,  380,  934,  237,  169,  169,  169,

      169,  452,  169,  362,  169,  453,  383,  169,  363,  169,
      455,  384,  934,  381,  364,  934,  382,  169,  934,  169,
      385,  365,  169,  458,  169,  169,  393,  169,  452,  169,
      362,  390,  453,  383,  169,  363,  169,  459,  384,  169,
      460,  364,  169,  391,  169,  169,  934,  385,  365,  169,
      458,  461,  169,  393,  169,  371,  169,  372,  390,  169,
      934,  373,  934,  169,  459,  169,  169,  460,  374,  169,
      391,  394,  169,  395,  462,  463,  399,  169,  461,  934,
      934,  934,  371,  169,  372,  169,  169,  396,  373,  397,
      169,  169,  169,  934,  934,  374,  934,  934,  394,  934,

      395,  462,  463,  399,  169,  386,  169,  169,  169,  169,
      169,  169,  169,  934,  396,  387,  397,  400,  169,  464,
      388,  389,  401,  169,  402,  465,  169,  169,  169,  169,
      403,  934,  386,  169,  169,  169,  169,  404,  169,  169,
      405,  169,  387,  169,  400,  169,  464,  388,  389,  401,
      169,  402,  465,  169,  169,  169,  169,  403,  169,  169,
      407,  169,  406,  169,  404,  169,  169,  405,  169,  409,
      169,  408,  169,  169,  466,  410,  934,  934,  169,  411,
      420,  934,  934,  169,  169,  169,  169,  407,  169,  406,
      169,  934,  169,  169,  169,  169,  409,  169,  408,  414,

      169,  466,  410,  412,  169,  169,  411,  420,  413,  169,
      169,  169,  415,  467,  169,  934,  934,  169,  169,  456,
      169,  169,  169,  934,  169,  416,  414,  169,  934,  169,
      412,  169,  934,  417,  457,  413,  169,  418,  169,  415,
      467,  169,  169,  169,  169,  169,  456,  169,  468,  934,
      422,  421,  416,  169,  169,  419,  169,  934,  934,  169,
      417,  457,  169,  169,  418,  169,  423,  469,  169,  169,
      169,  470,  471,  169,  169,  468,  424,  422,  421,  169,
      169,  169,  419,  934,  169,  169,  169,  425,  169,  169,
      169,  934,  426,  423,  469,  169,  427,  428,  470,  471,

      169,  169,  934,  424,  169,  169,  169,  436,  169,  169,
      438,  169,  169,  429,  425,  169,  430,  431,  169,  426,
      437,  432,  472,  427,  428,  433,  169,  169,  169,  169,
      169,  169,  169,  434,  436,  169,  169,  438,  169,  435,
      429,  169,  473,  430,  431,  169,  169,  437,  432,  472,
      439,  474,  433,  169,  169,  169,  169,  169,  475,  476,
      434,  477,  169,  478,  479,  169,  435,  480,  169,  473,
      481,  483,  484,  169,  485,  486,  487,  439,  474,  488,
      482,  489,  169,  490,  491,  475,  476,  492,  477,  493,
      478,  479,  494,  495,  480,  496,  497,  481,  483,  484,

      500,  485,  486,  487,  501,  498,  488,  482,  489,  502,
      490,  491,  503,  504,  492,  505,  493,  506,  507,  494,
      495,  508,  496,  497,  499,  509,  510,  500,  511,  512,
      513,  501,  498,  514,  515,  516,  502,  517,  518,  503,
      504,  519,  505,  520,  506,  507,  521,  522,  508,  523,
      524,  499,  509,  510,  525,  511,  512,  513,  526,  169,
      514,  515,  516,  527,  517,  518,  934,  169,  519,  528,
      520,  169,  169,  521,  522,  169,  523,  524,  529,  169,
      169,  525,  533,  169,  169,  526,  169,  169,  934,  169,
      527,  169,  169,  169,  169,  169,  528,  169,  169,  169,

      169,  169,  169,  530,  169,  529,  169,  169,  532,  533,
      169,  169,  169,  169,  169,  531,  169,  169,  169,  169,
      169,  169,  169,  534,  169,  169,  934,  169,  169,  934,
      530,  169,  169,  169,  537,  532,  169,  934,  169,  169,
      169,  934,  531,  614,  169,  169,  615,  934,  169,  535,
      534,  536,  169,  169,  169,  934,  169,  169,  169,  169,
      169,  537,  539,  169,  541,  169,  540,  543,  538,  934,
      614,  616,  169,  615,  169,  542,  535,  169,  536,  169,
      169,  169,  544,  169,  169,  169,  169,  169,  545,  539,
      169,  541,  546,  540,  543,  538,  169,  548,  616,  169,

      169,  169,  542,  934,  169,  934,  169,  934,  551,  544,
      169,  547,  169,  169,  169,  545,  169,  169,  550,  546,
      169,  169,  169,  169,  548,  617,  169,  169,  169,  552,
      169,  169,  549,  169,  555,  551,  618,  169,  547,  169,
      554,  169,  169,  169,  553,  550,  169,  169,  169,  169,
      169,  169,  617,  169,  169,  169,  552,  169,  169,  549,
      169,  555,  169,  618,  619,  169,  169,  554,  169,  169,
      556,  553,  557,  169,  169,  565,  934,  169,  169,  934,
      169,  169,  169,  558,  169,  169,  169,  560,  169,  169,
      559,  619,  169,  169,  169,  169,  169,  556,  934,  557,

      561,  169,  565,  562,  169,  169,  169,  934,  169,  169,
      558,  169,  169,  169,  560,  169,  169,  559,  169,  566,
      563,  169,  169,  169,  567,  169,  934,  561,  564,  620,
      562,  169,  169,  169,  169,  169,  934,  169,  169,  169,
      568,  934,  934,  169,  169,  169,  566,  563,  169,  169,
      569,  567,  169,  570,  169,  564,  620,  169,  571,  573,
      169,  169,  169,  572,  169,  169,  169,  568,  169,  169,
      934,  169,  575,  169,  169,  169,  169,  569,  574,  169,
      570,  169,  169,  169,  169,  571,  573,  169,  576,  169,
      572,  169,  169,  169,  169,  169,  169,  169,  621,  575,

      169,  169,  169,  169,  577,  574,  169,  578,  622,  169,
      169,  169,  169,  579,  934,  576,  169,  169,  169,  169,
      169,  169,  169,  580,  169,  621,  934,  583,  169,  169,
      169,  577,  169,  584,  578,  622,  169,  623,  169,  169,
      579,  581,  169,  169,  169,  169,  582,  169,  169,  169,
      580,  587,  169,  169,  583,  169,  588,  585,  934,  169,
      584,  169,  169,  169,  623,  169,  624,  590,  581,  169,
      934,  169,  169,  582,  169,  169,  586,  169,  587,  169,
      169,  169,  593,  588,  585,  589,  169,  169,  169,  169,
      592,  169,  169,  624,  590,  594,  169,  169,  169,  934,

      625,  591,  169,  586,  169,  169,  169,  169,  169,  593,
      934,  169,  589,  169,  169,  169,  169,  592,  169,  169,
      596,  169,  594,  169,  169,  169,  597,  625,  591,  169,
      169,  169,  169,  169,  169,  626,  627,  595,  169,  169,
      169,  169,  169,  169,  934,  601,  169,  596,  169,  169,
      169,  599,  169,  597,  169,  169,  598,  169,  169,  628,
      169,  934,  626,  627,  595,  169,  169,  169,  169,  169,
      600,  169,  601,  629,  169,  169,  169,  169,  599,  169,
      602,  169,  169,  598,  606,  630,  628,  169,  169,  605,
      169,  169,  169,  169,  631,  934,  169,  600,  169,  169,

      629,  169,  169,  603,  632,  604,  169,  602,  169,  169,
      169,  606,  630,  169,  169,  169,  605,  169,  169,  934,
      169,  631,  609,  607,  169,  608,  169,  169,  169,  169,
      603,  632,  604,  169,  169,  169,  169,  169,  633,  169,
      169,  169,  613,  611,  169,  610,  612,  169,  169,  609,
      607,  169,  608,  169,  169,  169,  169,  634,  635,  169,
      169,  169,  636,  637,  638,  633,  169,  639,  640,  613,
      611,  169,  610,  612,  169,  169,  641,  642,  643,  644,
      169,  645,  646,  648,  634,  635,  169,  649,  650,  636,
      637,  638,  651,  647,  639,  640,  652,  653,  654,  655,

      656,  657,  658,  641,  642,  643,  644,  659,  645,  646,
      648,  660,  661,  662,  649,  650,  663,  664,  665,  651,
      647,  666,  667,  652,  653,  654,  655,  656,  657,  658,
      668,  669,  670,  671,  659,  672,  673,  674,  660,  661,
      662,  675,  676,  663,  664,  665,  677,  678,  666,  667,
      679,  680,  169,  934,  934,  169,  934,  668,  669,  670,
      671,  685,  672,  673,  674,  681,  169,  169,  675,  676,
      169,  748,  169,  677,  678,  683,  169,  679,  680,  169,
      682,  169,  169,  684,  688,  686,  169,  169,  685,  169,
      169,  934,  681,  169,  169,  169,  169,  169,  748,  169,

      934,  687,  683,  169,  169,  169,  169,  682,  169,  169,
      684,  688,  686,  169,  169,  169,  169,  169,  689,  690,
      691,  169,  169,  169,  169,  169,  169,  692,  687,  934,
      169,  169,  169,  169,  934,  749,  169,  934,  934,  169,
      696,  169,  169,  169,  169,  689,  690,  691,  169,  169,
      169,  169,  169,  169,  692,  694,  693,  169,  695,  169,
      169,  169,  749,  169,  169,  698,  169,  696,  169,  169,
      169,  169,  697,  934,  169,  169,  169,  169,  169,  934,
      169,  169,  694,  693,  934,  695,  169,  169,  169,  700,
      169,  169,  698,  169,  169,  169,  169,  934,  169,  697,

      699,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      934,  704,  169,  169,  701,  169,  700,  169,  934,  703,
      169,  169,  169,  169,  169,  169,  169,  699,  702,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  704,  169,
      169,  701,  169,  705,  169,  706,  703,  169,  169,  169,
      169,  169,  934,  169,  169,  702,  169,  169,  707,  169,
      169,  169,  169,  169,  169,  750,  169,  169,  169,  169,
      705,  934,  706,  708,  169,  169,  169,  169,  169,  709,
      169,  169,  934,  169,  169,  707,  169,  169,  169,  169,
      169,  934,  750,  169,  169,  169,  169,  710,  169,  751,

      708,  711,  712,  934,  169,  169,  709,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  715,  713,
      169,  934,  169,  934,  710,  169,  751,  752,  711,  712,
      714,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  715,  713,  169,  716,  169,
      717,  718,  169,  169,  752,  934,  169,  714,  169,  169,
      169,  169,  753,  169,  169,  722,  719,  169,  169,  169,
      169,  169,  169,  934,  169,  716,  169,  717,  718,  169,
      169,  720,  721,  169,  169,  169,  934,  723,  169,  753,
      169,  934,  722,  719,  169,  169,  169,  169,  169,  169,

      169,  169,  726,  169,  169,  169,  169,  934,  720,  721,
      724,  169,  169,  725,  723,  169,  169,  169,  727,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  726,
      934,  169,  169,  169,  730,  934,  728,  724,  169,  169,
      725,  934,  169,  169,  169,  727,  169,  169,  169,  169,
      169,  729,  169,  169,  169,  169,  733,  732,  169,  169,
      169,  730,  731,  728,  734,  169,  169,  934,  735,  169,
      169,  934,  169,  169,  169,  169,  169,  169,  729,  169,
      169,  169,  736,  733,  732,  169,  169,  169,  169,  731,
      169,  734,  169,  169,  738,  735,  169,  169,  169,  169,

      169,  169,  169,  169,  737,  934,  169,  169,  741,  736,
      169,  739,  169,  169,  740,  169,  169,  169,  169,  169,
      169,  738,  169,  169,  169,  169,  743,  744,  742,  169,
      169,  737,  169,  169,  934,  741,  169,  169,  739,  169,
      169,  740,  747,  169,  169,  169,  169,  169,  754,  169,
      169,  169,  746,  743,  744,  742,  169,  169,  169,  169,
      169,  745,  169,  169,  755,  756,  169,  757,  758,  747,
      759,  169,  760,  169,  169,  754,  761,  169,  169,  746,
      762,  763,  764,  169,  765,  169,  766,  767,  745,  169,
      768,  755,  756,  169,  757,  758,  769,  759,  770,  760,

      771,  772,  773,  761,  774,  169,  775,  762,  763,  764,
      776,  765,  777,  766,  767,  778,  779,  768,  780,  781,
      782,  783,  784,  769,  785,  770,  786,  771,  772,  773,
      787,  774,  788,  775,  789,  790,  791,  776,  792,  777,
      793,  794,  778,  779,  795,  780,  781,  782,  783,  784,
      796,  785,  169,  786,  169,  169,  934,  787,  798,  788,
      799,  789,  790,  791,  169,  792,  934,  793,  794,  800,
      169,  795,  169,  169,  169,  169,  797,  796,  169,  169,
      169,  169,  169,  802,  169,  798,  169,  799,  803,  169,
      169,  169,  934,  169,  804,  801,  800,  169,  169,  169,

      169,  169,  169,  797,  169,  169,  169,  169,  169,  169,
      802,  169,  169,  169,  805,  803,  169,  169,  169,  806,
      169,  804,  801,  807,  169,  169,  934,  169,  169,  169,
      934,  169,  169,  169,  846,  169,  169,  809,  810,  169,
      811,  805,  169,  169,  808,  169,  806,  169,  169,  169,
      807,  169,  169,  169,  169,  169,  169,  812,  169,  169,
      169,  846,  169,  934,  809,  810,  814,  811,  813,  169,
      169,  808,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  815,  169,  169,  812,  169,  169,  169,  817,  169,
      816,  847,  169,  814,  169,  813,  169,  169,  169,  169,

      169,  934,  169,  169,  169,  169,  169,  818,  815,  169,
      169,  819,  169,  169,  169,  817,  169,  816,  847,  169,
      169,  169,  821,  169,  169,  169,  169,  934,  169,  169,
      169,  169,  169,  169,  818,  820,  169,  169,  819,  169,
      169,  169,  169,  169,  823,  822,  169,  169,  169,  821,
      824,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  934,  820,  169,  169,  169,  169,  169,  825,  169,
      827,  823,  822,  169,  169,  169,  169,  824,  169,  169,
      169,  169,  934,  169,  169,  169,  169,  169,  830,  169,
      169,  826,  169,  169,  169,  825,  169,  827,  831,  934,

      169,  169,  828,  169,  934,  934,  169,  169,  169,  169,
      934,  848,  169,  169,  169,  830,  169,  169,  826,  829,
      169,  169,  169,  169,  832,  831,  169,  169,  169,  828,
      835,  834,  169,  169,  169,  169,  169,  833,  848,  934,
      934,  169,  169,  934,  934,  169,  829,  169,  169,  169,
      934,  832,  169,  169,  169,  169,  169,  835,  834,  169,
      169,  169,  169,  934,  833,  169,  840,  839,  842,  169,
      836,  169,  169,  837,  849,  169,  169,  838,  934,  169,
      169,  169,  169,  169,  841,  169,  169,  169,  169,  169,
      169,  169,  169,  840,  839,  842,  850,  836,  169,  169,

      837,  849,  169,  169,  838,  169,  851,  169,  852,  169,
      169,  841,  169,  169,  853,  169,  843,  169,  169,  169,
      844,  845,  169,  850,  169,  169,  169,  854,  855,  169,
      856,  857,  169,  851,  858,  852,  859,  169,  860,  861,
      862,  853,  863,  843,  169,  169,  169,  844,  845,  169,
      864,  169,  169,  865,  854,  855,  866,  856,  857,  867,
      868,  858,  869,  859,  870,  860,  861,  862,  871,  863,
      872,  169,  169,  873,  169,  934,  169,  864,  875,  934,
      865,  934,  900,  866,  169,  874,  867,  868,  169,  869,
      901,  870,  934,  169,  169,  871,  169,  872,  169,  169,

      873,  169,  876,  169,  169,  875,  877,  169,  169,  900,
      169,  169,  874,  934,  879,  169,  169,  901,  169,  169,
      169,  169,  880,  169,  878,  169,  169,  169,  169,  876,
      169,  169,  169,  877,  169,  169,  169,  169,  169,  934,
      881,  879,  169,  169,  169,  169,  169,  934,  169,  880,
      169,  878,  169,  882,  169,  169,  169,  169,  169,  169,
      934,  934,  169,  169,  169,  169,  169,  881,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      882,  883,  169,  169,  934,  169,  169,  886,  884,  169,
      169,  169,  169,  169,  169,  169,  934,  169,  169,  169,

      169,  169,  169,  169,  902,  169,  169,  169,  883,  169,
      169,  885,  169,  169,  886,  884,  169,  169,  169,  169,
      888,  169,  890,  887,  169,  169,  169,  889,  169,  169,
      934,  902,  169,  169,  169,  934,  169,  169,  885,  169,
      169,  169,  169,  169,  169,  169,  903,  888,  891,  890,
      887,  169,  169,  169,  889,  169,  892,  169,  169,  169,
      169,  169,  169,  169,  934,  934,  893,  169,  169,  169,
      904,  169,  169,  903,  169,  891,  895,  169,  169,  169,
      169,  894,  169,  892,  169,  169,  896,  169,  169,  169,
      169,  169,  169,  893,  169,  169,  169,  904,  934,  169,

      169,  169,  905,  895,  169,  169,  897,  169,  894,  169,
      169,  169,  169,  896,  169,  169,  169,  169,  169,  169,
      906,  169,  169,  169,  934,  169,  907,  169,  908,  905,
      909,  169,  899,  897,  169,  934,  169,  169,  169,  169,
      169,  169,  169,  169,  898,  169,  169,  906,  169,  169,
      910,  169,  169,  907,  169,  908,  169,  909,  169,  899,
      169,  169,  169,  169,  920,  169,  169,  169,  169,  169,
      169,  898,  169,  169,  169,  169,  169,  910,  169,  169,
      911,  169,  169,  169,  169,  169,  934,  169,  169,  169,
      169,  920,  169,  169,  912,  169,  169,  169,  913,  169,

      169,  169,  169,  169,  169,  934,  169,  911,  169,  169,
      169,  169,  169,  915,  169,  169,  914,  169,  169,  921,
      169,  912,  169,  169,  169,  913,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  922,  169,  169,  916,
      915,  169,  919,  914,  169,  169,  921,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  923,  169,
      169,  169,  169,  922,  918,  169,  916,  917,  924,  919,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  923,  934,  925,  930,  169,
      169,  918,  169,  169,  917,  924,  934,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  926,  169,
      169,  169,  169,  169,  925,  930,  931,  169,  934,  169,
      169,  932,  929,  927,  169,  169,  169,  928,  934,  169,
      169,  169,  169,  169,  169,  926,  934,  169,  169,  169,
      169,  169,  169,  931,  169,  169,  169,  169,  932,  929,
      927,  169,  934,  169,  928,  169,  933,  169,  169,  169,
      934,  934,  169,  934,  934,  169,  169,  169,  169,  169,
      934,  169,  169,  169,  169,  169,  934,  934,  934,  934,
      934,  934,  169,  933,  934,  934,  934,  934,  934,  169,
      934,  934,  169,  169,  169,  934,  934,  934,  934,  934,

      934,  934,  169,   74,  934,  934,   74,   75,  934,   75,
       75,  157,  934,  157,  157,  159,  934,  159,  159,  160,
      934,  160,  160,  169,  934,  169,  169,    5,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934

    } ;

static yyconst flex_int16_t yy_chk[3794] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,   13,   13,   14,   14,   16,   17,   16,   25,
       20,   21,   22,   26,   16,   20,   16,   21,   22,   85,
       21,   16,   23,   21,   16,   40,   40,   17,   41,   41,
       23,   47,   47,   16,   17,   16,   25,   20,   21,   22,
       26,   16,   20,   16,   21,   22,   85,   21,   16,   23,
       21,   16,   24,  937,   17,   18,   36,   23,   36,   24,
       24,   36,   18,   28,   33,   24,   27,   28,   33,   18,

       27,   28,   18,   18,   48,   48,   27,   73,   73,   24,
       80,   80,   18,   36,  342,   36,   24,   24,   36,   18,
       28,   33,   24,   27,   28,   33,   18,   27,   28,   18,
       18,   19,   29,   27,   86,   19,   37,   89,   31,   19,
       38,   38,   30,   87,   37,   19,   29,  243,   19,   31,
       30,   87,   29,   29,   30,   31,  164,   30,   19,   29,
      163,   86,   19,   37,   89,   31,   19,   38,   38,   30,
       87,   37,   19,   29,   54,   19,   31,   30,   87,   29,
       29,   30,   31,   88,   30,   34,   88,   34,   54,   56,
       34,   60,  160,   54,   54,   90,   56,   34,   34,   66,

       93,   54,   56,   34,  158,  158,  159,   93,   79,   56,
       88,   60,   34,   88,   34,   54,   56,   34,   60,   66,
       54,   54,   90,   56,   34,   34,   66,   93,   91,   56,
       34,   35,   35,   57,   93,   35,   56,   57,   60,   35,
       94,   57,   91,   67,   78,   35,   66,   67,   35,  165,
      165,   59,   75,   74,   49,   91,   46,   57,   35,   35,
       57,   59,   35,   67,   57,   45,   35,   94,   57,   91,
       67,   59,   35,   44,   67,   35,   50,   50,   59,   50,
       50,   50,   50,   50,   57,   50,   50,   50,   59,   97,
       67,   50,   61,   50,   98,  101,   61,   42,   59,   50,

       62,   50,   61,   95,   62,   95,   50,  102,   62,   50,
       15,   12,   61,   11,   10,    5,   97,    0,   50,   61,
       50,   98,  101,   61,   62,    0,   50,   62,   50,   61,
       95,   62,   95,   50,  102,   62,   50,   51,   51,   61,
       51,   51,   51,   51,   51,  103,   51,   51,   51,    0,
        0,   62,   71,   51,   96,   72,   71,    0,   72,   72,
       71,  100,  100,  105,   96,  106,   99,  107,  108,  109,
      110,   99,  103,   51,    0,   72,   71,   99,    0,   71,
       51,   96,   72,   71,   99,   72,   72,   71,  100,  100,
      105,   96,  106,   99,  107,  108,  109,  110,   99,  114,

       51,   52,   72,   71,   99,   52,    0,  104,   52,  104,
      116,   99,    0,  104,  111,   52,  112,  111,   52,   52,
      104,  112,  117,  115,  118,   52,  114,  119,   52,  120,
        0,  120,   52,  115,  104,   52,  104,  116,  115,  115,
      104,  111,   52,  112,  111,   52,   52,  104,  112,  117,
      115,  118,   52,   53,  119,  122,  120,   53,  120,  123,
      115,   53,  121,  124,  121,  115,  115,   53,  125,  126,
       53,  127,  128,  129,  131,  132,  133,   53,    0,  134,
       53,  135,  122,  137,   53,  135,  123,  136,   53,  121,
      124,  121,  136,  138,   53,  125,  126,   53,  127,  128,

      129,  131,  132,  133,   53,   55,  134,  140,  135,   55,
      137,  141,  135,  142,  136,   55,  139,  143,   55,  136,
      138,   55,  144,  145,  139,   55,    0,    0,  146,  147,
      148,  149,   55,    0,  140,    0,   55,  151,  141,  146,
      142,  153,   55,  139,  143,   55,    0,  153,   55,  144,
      145,  139,   55,   58,   58,  146,  147,  148,  149,  154,
      150,   58,   58,  150,  151,  152,  146,   58,  153,  152,
      155,  156,  154,   58,  153,    0,  245,    0,    0,  247,
       58,   58,  169,  170,  170,    0,  154,  150,   58,   58,
      150,  248,  152,  171,   58,    0,  152,  155,  156,  154,

       58,   63,  169,  245,  170,   63,  247,    0,  171,  169,
      170,  170,  174,  171,  174,   63,    0,  175,  248,  175,
      171,   63,   63,  172,    0,   63,    0,    0,   63,  169,
      172,  170,   63,  252,  174,  171,  177,  175,  172,  174,
      171,  174,   63,  172,  175,  253,  175,  179,   63,   63,
      172,  198,   63,   64,   64,  173,  177,  172,  173,  173,
      252,  174,   64,  177,  175,  172,   64,  179,    0,   64,
      172,  198,  253,   64,  179,  176,  176,    0,  198,  173,
       64,   64,  173,  177,    0,  173,  173,    0,  203,   64,
      176,    0,    0,   64,  179,  176,   64,    0,  198,  181,

       64,   65,  176,  176,  180,   65,  173,  178,  203,  181,
      254,  180,   65,  180,  178,  203,    0,  176,   65,  181,
        0,  178,  176,    0,  180,   65,  181,  178,   65,  255,
      182,  180,   65,  256,  178,  203,  181,  254,  180,   65,
      180,  178,    0,  207,    0,   65,  181,  182,  178,  183,
      182,  180,   65,   68,  178,   68,  255,  182,   68,  185,
      256,    0,  207,  207,  183,   68,   68,  186,  187,  183,
      207,   68,  185,  185,  182,   68,  183,  182,  187,  185,
       68,  215,   68,  186,    0,   68,  185,  186,  187,  207,
      207,  183,   68,   68,  186,  187,  183,  257,   68,  185,

      185,  215,   68,   69,   69,  187,  185,   69,  215,  190,
      186,   69,  191,  192,  186,  187,  190,   69,  258,  188,
       69,  188,  259,  192,  257,  191,    0,   69,  215,  190,
       69,   69,  191,  192,   69,  260,  190,    0,   69,  191,
      192,  188,    0,  190,   69,  258,  188,   69,  188,  259,
      192,  193,  191,  194,   69,   70,  190,  195,  193,  191,
      192,  263,  260,  194,   70,    0,   70,  195,  188,   70,
        0,  193,  196,  194,    0,   70,    0,  195,  193,    0,
      194,    0,   70,  264,  195,  193,  196,    0,  263,  196,
      194,   70,  196,   70,  195,    0,   70,  197,  193,  196,

      194,  262,   70,  184,  195,  262,  197,  184,  184,  199,
      264,  197,    0,  196,  184,    0,  196,  197,    0,  196,
      199,  184,  201,  266,  197,  204,  204,  184,  262,  199,
      184,  201,  262,  197,  184,  184,  199,  267,  197,  202,
      268,  184,  201,  202,  197,  204,    0,  199,  184,  201,
      266,  269,  204,  204,  184,  189,  199,  189,  201,  202,
        0,  189,    0,  208,  267,  205,  202,  268,  189,  201,
      202,  205,  204,  205,  270,  271,  208,  189,  269,    0,
        0,    0,  189,  208,  189,  205,  202,  206,  189,  206,
      208,  206,  205,    0,    0,  189,    0,    0,  205,    0,

      205,  270,  271,  208,  189,  200,  200,  210,  209,  211,
      208,  206,  205,    0,  206,  200,  206,  209,  206,  272,
      200,  200,  210,  212,  211,  273,  200,  210,  209,  211,
      212,    0,  200,  200,  210,  209,  211,  213,  206,  214,
      214,  213,  200,  212,  209,  217,  272,  200,  200,  210,
      212,  211,  273,  200,  210,  209,  211,  212,  218,  214,
      217,  213,  216,  216,  213,  217,  214,  214,  213,  219,
      212,  218,  217,  219,  274,  220,    0,    0,  218,  220,
      227,    0,    0,  216,  227,  218,  214,  217,  213,  216,
      216,    0,  217,  219,  221,  220,  219,  222,  218,  222,

      219,  274,  220,  221,  227,  218,  220,  227,  221,  223,
      216,  227,  223,  275,  221,    0,    0,  222,  224,  265,
      219,  221,  220,    0,  222,  224,  222,  225,    0,  223,
      221,  227,    0,  224,  265,  221,  223,  225,  224,  223,
      275,  221,  226,  228,  222,  224,  265,  225,  276,    0,
      229,  228,  224,  229,  225,  226,  223,    0,    0,  230,
      224,  265,  226,  228,  225,  224,  230,  278,  231,  226,
      228,  279,  280,  229,  225,  276,  231,  229,  228,  230,
      229,  234,  226,    0,  232,  233,  230,  231,  231,  226,
      228,    0,  232,  230,  278,  231,  233,  234,  279,  280,

      229,  234,    0,  231,  232,  233,  230,  239,  234,  235,
      240,  232,  233,  235,  231,  231,  235,  236,  236,  232,
      239,  237,  281,  233,  234,  237,  238,  239,  234,  235,
      240,  232,  233,  238,  239,  241,  235,  240,  236,  238,
      235,  237,  282,  235,  236,  236,  238,  239,  237,  281,
      241,  283,  237,  238,  239,  241,  235,  240,  284,  285,
      238,  286,  241,  287,  288,  236,  238,  289,  237,  282,
      290,  291,  292,  238,  294,  295,  296,  241,  283,  297,
      290,  298,  241,  300,  301,  284,  285,  302,  286,  304,
      287,  288,  305,  306,  289,  307,  308,  290,  291,  292,

      310,  294,  295,  296,  311,  309,  297,  290,  298,  312,
      300,  301,  313,  314,  302,  315,  304,  316,  317,  305,
      306,  319,  307,  308,  309,  320,  321,  310,  323,  325,
      326,  311,  309,  327,  329,  330,  312,  330,  331,  313,
      314,  332,  315,  334,  316,  317,  335,  336,  319,  337,
      338,  309,  320,  321,  339,  323,  325,  326,  340,  343,
      327,  329,  330,  344,  330,  331,    0,  345,  332,  346,
      334,  347,  348,  335,  336,  349,  337,  338,  347,  343,
      350,  339,  354,  344,  354,  340,  343,  345,    0,  346,
      344,  347,  348,  351,  345,  349,  346,  352,  347,  348,

      350,  353,  349,  351,  354,  347,  343,  350,  353,  354,
      344,  354,  360,  351,  345,  352,  346,  352,  347,  348,
      351,  353,  349,  355,  352,  355,    0,  350,  353,    0,
      351,  354,  360,  356,  358,  353,  357,    0,  358,  360,
      351,    0,  352,  440,  352,  355,  441,    0,  353,  356,
      355,  357,  355,  356,  359,    0,  357,  362,  358,  360,
      356,  358,  361,  357,  362,  358,  361,  364,  359,    0,
      440,  442,  355,  441,  359,  363,  356,  362,  357,  363,
      356,  359,  364,  357,  362,  358,  361,  364,  365,  361,
      365,  362,  366,  361,  364,  359,  367,  368,  442,  363,

      368,  359,  363,    0,  362,    0,  363,    0,  371,  364,
      365,  367,  366,  361,  364,  365,  367,  365,  370,  366,
      368,  369,  370,  367,  368,  443,  363,  368,  371,  372,
      373,  372,  369,  374,  375,  371,  444,  365,  367,  366,
      374,  369,  370,  367,  373,  370,  376,  368,  369,  370,
      373,  372,  443,  374,  375,  371,  372,  373,  372,  369,
      374,  375,  377,  444,  446,  378,  376,  374,  369,  370,
      377,  373,  378,  376,  380,  386,    0,  373,  372,    0,
      374,  375,  377,  379,  381,  378,  379,  381,  383,  377,
      380,  446,  378,  376,  380,  386,  382,  377,    0,  378,

      382,  380,  386,  383,  381,  384,  379,    0,  383,  377,
      379,  381,  378,  379,  381,  383,  382,  380,  385,  387,
      384,  380,  386,  382,  388,  384,    0,  382,  385,  447,
      383,  381,  384,  379,  392,  383,    0,  390,  385,  387,
      389,    0,    0,  382,  388,  385,  387,  384,  393,  391,
      389,  388,  384,  390,  392,  385,  447,  390,  391,  394,
      389,  392,  398,  393,  390,  385,  387,  389,  393,  391,
        0,  388,  396,  396,  395,  393,  391,  389,  395,  394,
      390,  392,  398,  402,  390,  391,  394,  389,  397,  398,
      393,  400,  397,  396,  395,  393,  391,  401,  448,  396,

      396,  395,  399,  402,  399,  395,  394,  400,  449,  398,
      402,  400,  397,  401,    0,  397,  403,  401,  400,  397,
      396,  395,  399,  403,  401,  448,    0,  406,  404,  399,
      402,  399,  405,  407,  400,  449,  403,  450,  400,  397,
      401,  404,  409,  403,  401,  410,  405,  406,  404,  399,
      403,  409,  405,  407,  406,  404,  410,  408,    0,  405,
      407,  408,  409,  403,  450,  410,  451,  412,  404,  409,
        0,  412,  410,  405,  406,  404,  408,  411,  409,  405,
      407,  408,  415,  410,  408,  411,  413,  414,  408,  409,
      414,  412,  410,  451,  412,  416,  417,  411,  412,    0,

      452,  413,  415,  408,  411,  419,  413,  414,  408,  415,
        0,  420,  411,  413,  414,  416,  417,  414,  412,  418,
      419,  421,  416,  417,  411,  419,  420,  452,  413,  415,
      423,  420,  419,  413,  414,  454,  455,  418,  420,  418,
      424,  421,  416,  417,    0,  426,  418,  419,  421,  422,
      423,  424,  419,  420,  427,  425,  422,  423,  420,  456,
      424,    0,  454,  455,  418,  426,  418,  424,  421,  422,
      425,  428,  426,  457,  427,  425,  422,  423,  424,  430,
      428,  427,  425,  422,  431,  459,  456,  424,  431,  430,
      432,  428,  426,  429,  460,    0,  422,  425,  428,  430,

      457,  427,  425,  429,  461,  429,  430,  428,  431,  434,
      432,  431,  459,  429,  433,  431,  430,  432,  428,    0,
      429,  460,  435,  433,  435,  434,  430,  436,  437,  434,
      429,  461,  429,  438,  433,  431,  434,  432,  463,  439,
      429,  433,  439,  437,  435,  436,  438,  436,  437,  435,
      433,  435,  434,  438,  436,  437,  434,  464,  465,  439,
      438,  433,  466,  467,  471,  463,  439,  472,  474,  439,
      437,  435,  436,  438,  436,  437,  476,  477,  478,  479,
      438,  480,  481,  483,  464,  465,  439,  487,  489,  466,
      467,  471,  490,  481,  472,  474,  491,  492,  494,  495,

      496,  497,  498,  476,  477,  478,  479,  501,  480,  481,
      483,  502,  503,  504,  487,  489,  505,  506,  507,  490,
      481,  509,  510,  491,  492,  494,  495,  496,  497,  498,
      511,  512,  514,  515,  501,  516,  517,  518,  502,  503,
      504,  519,  520,  505,  506,  507,  521,  522,  509,  510,
      524,  525,  527,    0,    0,  529,    0,  511,  512,  514,
      515,  531,  516,  517,  518,  527,  532,  528,  519,  520,
      530,  616,  527,  521,  522,  529,  535,  524,  525,  527,
      528,  531,  529,  530,  535,  533,  532,  528,  531,  533,
      530,    0,  527,  532,  528,  534,  535,  530,  616,  527,

        0,  534,  529,  535,  537,  536,  538,  528,  531,  533,
      530,  535,  533,  532,  528,  534,  533,  530,  536,  537,
      538,  540,  534,  535,  537,  536,  538,  539,  534,    0,
      539,  537,  536,  538,    0,  617,  533,    0,    0,  542,
      544,  540,  534,  543,  544,  536,  537,  538,  540,  541,
      539,  537,  536,  538,  539,  542,  541,  539,  543,  542,
      545,  547,  617,  543,  544,  547,  542,  544,  540,  541,
      543,  544,  546,    0,  546,  549,  541,  539,  550,    0,
      545,  547,  542,  541,    0,  543,  542,  545,  547,  550,
      543,  544,  547,  548,  546,  549,  541,    0,  550,  546,

      548,  546,  549,  551,  553,  550,  555,  545,  547,  556,
        0,  554,  552,  548,  551,  554,  550,  557,    0,  553,
      548,  546,  549,  551,  553,  550,  555,  548,  552,  556,
      551,  553,  552,  555,  559,  554,  556,  557,  554,  552,
      548,  551,  554,  558,  557,  559,  553,  558,  560,  561,
      551,  553,    0,  555,  559,  552,  556,  562,  561,  552,
      569,  559,  554,  563,  557,  618,  564,  558,  560,  561,
      558,    0,  559,  563,  558,  560,  561,  562,  565,  564,
      569,  559,    0,  563,  562,  561,  564,  569,  566,  567,
      563,    0,  618,  564,  558,  560,  561,  565,  565,  619,

      563,  566,  567,    0,  562,  565,  564,  569,  566,  567,
      563,  570,  571,  564,  572,  566,  567,  568,  570,  568,
      573,    0,  575,    0,  565,  565,  619,  621,  566,  567,
      568,  570,  571,  574,  572,  566,  567,  568,  570,  571,
      573,  572,  575,  576,  568,  570,  568,  573,  574,  575,
      576,  577,  578,  574,  621,    0,  580,  568,  570,  571,
      574,  572,  622,  576,  568,  582,  578,  573,  579,  575,
      576,  577,  578,    0,  583,  574,  580,  576,  577,  578,
      574,  579,  581,  580,  581,  582,    0,  583,  579,  622,
      576,    0,  582,  578,  583,  579,  586,  584,  577,  578,

      587,  583,  588,  580,  581,  585,  588,    0,  579,  581,
      584,  581,  582,  585,  583,  579,  586,  584,  589,  592,
      587,  583,  589,  586,  584,  585,  588,  587,  590,  588,
        0,  581,  585,  588,  592,    0,  590,  584,  591,  592,
      585,    0,  589,  586,  584,  589,  592,  587,  590,  589,
      595,  591,  585,  588,  593,  590,  596,  594,  591,  594,
      597,  592,  593,  590,  597,  591,  592,    0,  598,  589,
      595,    0,  599,  600,  593,  590,  596,  595,  591,  594,
      597,  593,  599,  596,  594,  591,  594,  597,  598,  593,
      601,  597,  599,  600,  602,  598,  602,  595,  604,  599,

      600,  593,  603,  596,  601,    0,  594,  597,  605,  599,
      601,  603,  605,  606,  604,  598,  602,  601,  604,  599,
      600,  602,  603,  602,  607,  604,  607,  608,  606,  603,
      610,  601,  605,  606,    0,  605,  611,  601,  603,  605,
      606,  604,  612,  602,  607,  604,  613,  608,  623,  603,
      610,  607,  611,  607,  608,  606,  611,  610,  609,  605,
      606,  609,  612,  611,  625,  626,  613,  627,  628,  612,
      630,  607,  631,  613,  608,  623,  632,  610,  609,  611,
      633,  634,  635,  611,  636,  609,  637,  638,  609,  612,
      640,  625,  626,  613,  627,  628,  641,  630,  642,  631,

      645,  646,  647,  632,  648,  609,  653,  633,  634,  635,
      654,  636,  655,  637,  638,  658,  659,  640,  660,  661,
      662,  664,  665,  641,  666,  642,  667,  645,  646,  647,
      668,  648,  669,  653,  670,  671,  673,  654,  674,  655,
      675,  677,  658,  659,  678,  660,  661,  662,  664,  665,
      679,  666,  681,  667,  682,  683,    0,  668,  684,  669,
      685,  670,  671,  673,  687,  674,    0,  675,  677,  686,
      686,  678,  681,  689,  682,  683,  683,  679,  684,  681,
      685,  682,  683,  689,  687,  684,  688,  685,  690,  691,
      686,  687,    0,  689,  692,  688,  686,  686,  692,  681,

      689,  682,  683,  683,  693,  684,  688,  685,  690,  691,
      689,  687,  694,  688,  693,  690,  691,  686,  692,  694,
      689,  692,  688,  695,  693,  692,    0,  696,  698,  697,
        0,  693,  694,  688,  748,  690,  691,  698,  699,  694,
      700,  693,  701,  695,  697,  692,  694,  696,  698,  697,
      695,  693,  703,  702,  696,  698,  697,  701,  699,  694,
      700,  748,  701,    0,  698,  699,  703,  700,  702,  701,
      695,  697,  703,  702,  696,  698,  697,  704,  706,  703,
      702,  704,  710,  705,  701,  699,  707,  700,  707,  701,
      705,  750,  711,  703,  708,  702,  709,  704,  706,  703,

      702,    0,  710,  705,  704,  706,  707,  708,  704,  710,
      705,  709,  711,  707,  708,  707,  709,  705,  750,  711,
      712,  708,  713,  709,  704,  706,  716,    0,  717,  710,
      705,  714,  718,  707,  708,  712,  719,  715,  709,  711,
      712,  708,  713,  709,  715,  714,  716,  712,  717,  713,
      720,  714,  718,  716,  720,  717,  719,  715,  714,  718,
      723,    0,  712,  719,  715,  721,  724,  712,  721,  713,
      725,  715,  714,  716,  720,  717,  722,  720,  714,  718,
      723,  720,    0,  719,  715,  721,  724,  723,  728,  726,
      725,  722,  721,  724,  729,  721,  722,  725,  729,    0,

      730,  720,  726,  722,    0,    0,  727,  723,  728,  726,
        0,  751,  721,  724,  729,  728,  726,  725,  722,  727,
      730,  729,  732,  722,  731,  729,  727,  730,  731,  726,
      734,  733,  733,  727,  734,  728,  726,  732,  751,    0,
        0,  729,  732,    0,    0,  739,  727,  730,  731,  732,
        0,  731,  733,  727,  734,  731,  735,  734,  733,  733,
      736,  734,  737,    0,  732,  739,  740,  738,  742,  732,
      735,  738,  739,  736,  752,  731,  735,  737,    0,  733,
      736,  734,  737,  735,  741,  741,  740,  736,  742,  737,
      743,  738,  739,  740,  738,  742,  753,  735,  738,  747,

      736,  752,  744,  735,  737,  741,  755,  736,  756,  737,
      743,  741,  741,  740,  757,  742,  744,  743,  738,  747,
      745,  746,  744,  753,  745,  746,  747,  760,  764,  744,
      766,  769,  741,  755,  772,  756,  773,  743,  775,  776,
      778,  757,  779,  744,  745,  746,  747,  745,  746,  744,
      780,  745,  746,  782,  760,  764,  783,  766,  769,  786,
      788,  772,  789,  773,  790,  775,  776,  778,  795,  779,
      796,  745,  746,  797,  798,    0,  799,  780,  800,    0,
      782,    0,  851,  783,  803,  799,  786,  788,  801,  789,
      852,  790,    0,  797,  798,  795,  799,  796,  800,  802,

      797,  798,  801,  799,  803,  800,  802,  806,  801,  851,
      804,  803,  799,    0,  805,  801,  805,  852,  807,  802,
      797,  798,  806,  799,  804,  800,  802,  806,  808,  801,
      804,  803,  810,  802,  806,  801,  805,  804,  807,    0,
      809,  805,  809,  805,  811,  807,  802,    0,  808,  806,
      812,  804,  810,  813,  806,  808,  814,  804,  816,  810,
        0,    0,  809,  805,  811,  807,  817,  809,  818,  809,
      812,  811,  815,  813,  819,  808,  814,  812,  816,  810,
      813,  815,  820,  814,    0,  816,  817,  822,  818,  809,
      823,  811,  815,  817,  819,  818,    0,  812,  821,  815,

      813,  819,  820,  814,  854,  816,  826,  822,  815,  820,
      823,  821,  827,  817,  822,  818,  824,  823,  821,  815,
      825,  819,  828,  824,  825,  821,  826,  827,  829,  820,
        0,  854,  827,  826,  822,    0,  824,  823,  821,  827,
      830,  833,  828,  824,  825,  821,  859,  825,  829,  828,
      824,  825,  832,  826,  827,  829,  831,  834,  831,  827,
      830,  833,  836,  824,    0,    0,  832,  830,  833,  828,
      861,  825,  832,  859,  835,  829,  837,  834,  831,  832,
      837,  835,  836,  831,  834,  831,  838,  830,  833,  836,
      838,  839,  840,  832,  835,  841,  842,  861,    0,  832,

      837,  835,  862,  837,  834,  831,  839,  837,  835,  836,
      838,  839,  840,  838,  843,  841,  842,  838,  839,  840,
      865,  835,  841,  842,    0,  845,  868,  837,  869,  862,
      870,  844,  845,  839,  843,    0,  873,  838,  839,  840,
      874,  843,  841,  842,  844,  845,  875,  865,  876,  877,
      878,  844,  845,  868,  880,  869,  873,  870,  844,  845,
      874,  843,  882,  873,  901,  883,  875,  874,  876,  877,
      878,  844,  845,  875,  880,  876,  877,  878,  844,  881,
      879,  880,  882,  873,  879,  883,    0,  874,  884,  882,
      885,  901,  883,  875,  881,  876,  877,  878,  886,  881,

      886,  880,  887,  888,  879,    0,  881,  879,  884,  882,
      885,  879,  883,  889,  890,  884,  888,  885,  891,  903,
      886,  881,  887,  888,  892,  886,  881,  886,  893,  887,
      888,  879,  894,  889,  890,  884,  905,  885,  891,  892,
      889,  890,  897,  888,  892,  891,  903,  886,  893,  887,
      888,  892,  894,  898,  895,  893,  896,  899,  907,  894,
      889,  890,  897,  905,  896,  891,  892,  895,  908,  897,
      910,  892,  911,  898,  895,  893,  896,  899,  912,  894,
      898,  895,  914,  896,  899,  907,    0,  911,  920,  897,
      910,  896,  911,  913,  895,  908,    0,  910,  912,  911,

      898,  895,  914,  896,  899,  912,  916,  917,  913,  914,
      915,  918,  919,  913,  911,  920,  922,  910,    0,  911,
      913,  925,  918,  915,  926,  912,  916,  917,    0,  914,
      915,  918,  919,  916,  917,  913,    0,  915,  918,  919,
      913,  925,  927,  922,  926,  928,  929,  932,  925,  918,
      915,  926,    0,  916,  917,  933,  927,  915,  918,  919,
        0,    0,  927,    0,    0,  928,  929,  932,  925,  927,
        0,  926,  928,  929,  932,  933,    0,    0,    0,    0,
        0,    0,  933,  927,    0,    0,    0,    0,    0,  927,
        0,    0,  928,  929,  932,    0,    0,    0,    0,    0,

        0,    0,  933,  935,    0,    0,  935,  936,    0,  936,
      936,  938,    0,  938,  938,  939,    0,  939,  939,  940,
        0,  940,  940,  941,    0,  941,  941,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1618 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1901 "flex_lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 935 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 934 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 128:
#line 191 "flex_lexer.l"
case 129:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2640 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 935 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 935 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 934);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 220 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
